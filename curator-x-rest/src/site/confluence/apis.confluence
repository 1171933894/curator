[[Curator REST Proxy|index.html]] / APIs

h1. APIs

h2. Status APIs

||URL||Method||Request Entity||Response Entity||Description||
|/curator/v1/client/status|GET|n/a|Status|Call to get the status of the Curator connection as well as any pending messages.|
|/curator/v1/client/status|POST|List of string ids|Status|Call to get the status of the Curator connection as well as any pending messages. Additionally, stateful instances with the specified IDs are "touched" thus preventing timeout expiration.|

h2. Client APIs

||URL||Method||Request Entity||Response Entity||Description||
|/get-children|POST|GetChildrenSpec|Array of strings|This is the equivalent of CuratorFramework.getChildren().|
|/create|POST|CreateSpec|PathAndId|This is the equivalent of CuratorFramework.create().|
|/delete|POST|DeleteSpec|n/a|This is the equivalent of CuratorFramework.delete().|
|/set-data|POST|SetDataSpec|n/a|This is the equivalent of CuratorFramework.setData().|
|/get-data|POST|GetDataSpec|DataAndStat|This is the equivalent of CuratorFramework.setData().|
|/exists|POST|ExistsSpec|ZK Stat or empty|This is the equivalent of CuratorFramework.exists().|

h3. How Asynchronous APIs Are Handled

For async versions of the Client APIs, the result is returned via a Status Message. See the [[Managing Status|client.html]] section for details
as well as the [[Status Messages|status.html]] page which details the Asynchronous Client APIs messages.

h3. How Watchers Are Handled

If you set "isWatched" to true in a Client API, a status message is generated when the watcher fires. See the [[Managing Status|client.html]]
section for details as well as the [[Status Messages|status.html]] page which details the Watchers message.

h3. How Ephemeral Nodes Are Handled

If you create an ephemeral node using the Client APIs, you must periodically send a heartbeat with the ID of the ephemeral node (as
returned by the API). See the [[Client Page|client.html]] for details. IMPORTANT: if you fail to send heartbeats within the configured
session length, the Curator REST Proxy will delete the ephemeral node (sending an expiration status message).

h2. Recipe APIs

||URL||Method||Request Entity||Response Entity||Description||
|/curator/v1/recipes/lock|POST|LockSpec|IdSpec|An InterProcessSemaphoreMutex. On successful return, your client will be holding the specified lock until you delete the lock via the delete API.|
|/curator/v1/recipes/lock/{lock-id}|DELETE|n/a|n/a|Release and delete a lock.|
|/curator/v1/recipes/leader|POST|LeaderSpec|IdSpec|Start a LeaderLatch instance. When you gain leadership, it will be notified via status.|
|/curator/v1/recipes/leader/{leader-id}|DELETE|n/a|n/a|Release/delete leadership.|
|/curator/v1/recipes/leader/{leader-id}|GET|n/a|array of ParticipantSpecs|List of participants in the leader election.|

*MORE TBD*

h2. Entities

See the [[Entity Descriptions Page|entities.html]] for details on the Entities used in the APIs.

h2. Status Message Types

See the [[Status Message Page|status.html]] for details of the status messages for each type.

