1.1.2/1.0.3 - XXXXXXXXXXXXX
===========================
* Added listener to Queues to listen for put completion

* Issue 24: If InterProcesMutex.release() fails to delete the node (due to connection errors, etc.)
the instance was left in an inconsistent state that would cause a future call to acquire() to
succeed without actually creating the lock. There is no good solution to this so I've taken the
only way out - ignore the fact that the lock may not have been removed and clear the internal state.
This retains lock safety but forces the next locker to possibly wait for session timeout to clear
the original lock node. IMPORTANT: THERE IS AN EDGE CASE THAT CAN CAUSE A DEADLOCK.

1.1.1/1.0.2 - Jan. 21, 2012
===========================
* Issue 22: Make ServiceCache close itself down properly.

* Issue 21: Move TestNG to the top-level pom and define its scope as test

* Issue 17: ConnectionStateManager should use the builder's thread factory if present

1.1.0 - Jan. 5, 2012
=====================
* 1.1.x marks a separate branch of Curator:
    - 1.0.x will stay compatible with ZooKeeper 3.3.x
    - 1.1.x+ will require ZooKeeper 3.4.x+

* Added support for ZooKeeper 3.4's Transactions:
    - CuratorFramework has a new method: inTransaction() that starts a
      transaction builder
    - See TestTransactions for examples

1.0.1 - Jan. 4, 2012
=====================
* Updated and tested against ZooKeeper 3.4.2

1.0.0 - Dec. 31, 2011
=====================
* Added a REST server for Service Discovery
* Switched to slf4j for logging
* Moved to 1.0 version
* Curator is now feature complete

0.6.4 - Dec. 7, 2011
=====================
* Added Barrier

* Added Double Barrier

* Added Read/Write lock

* Added revocation to InterProcessMutex

* Fixed (hopefully) intermittent failures with testRetry()

* Updates/enhancements to Discovery based on suggestions from Eishay Smith

0.6.3 - Nov. 30, 2011
=====================
* Added Service Discovery

0.6.1 - Nov. 18, 2011
=====================
* Added new methods to LeaderSelector to identify/get all Participants

* Moved to ZooKeeper 3.3.3

* Made the TestingCluster not throw an assertion error due to internal JMX registrations
in ZK. This is done with Javaassist ugliness.

* Refactored listeners in Curator to a common methodology

* Major changes to error handling. Adding a ConnectionStateManager that allows users to
listen for connection changes. Connection loss is first treated as a recoverable Suspension.
If the connection is not re-established, the state changes to connection loss. Any recipes
that are affected by this have been updated.

* PathChildrenCache now handles connection state changes much better.

* All Curator created threads now have a meaningful name.

0.5.2 - Nov. 14, 2011
=====================
* Jérémie Bordier posted on the ZK mailing list about a split brain issue with the Leader Selector.
If the Leader is connected to a server that suffers a network partition, it needs to get notified
that it has lost leadership. Curator handled this somewhat but only if the client application
executed periodic ZooKeeper operations. I've enhanced the CuratorFramework implementation to check
for disconnection and executed a background sync (with retries). This will cause any listener's
unhandledError() method to get called when there is a network partition.

* New utility: TestingCluster. Allows for testing with an in-memory ZK ensemble.

* Reworked distributed atomic implementations. I was unhappy with the complexity of the previous
one. Now, there's a simpler master implementation DistributedAtomicValue that is the basis for the
others. Adding new versions should be simpler as well.

0.5.1 - Nov. 12, 2011
=====================
* Another pass at fixing the semaphore. Went back to the model of the count being merely a
convention. Added a new recipe for a SharedCount that can be used in place of the count convention
with the semaphore. This is the best of both worlds. The semaphore code is a lot simpler and will
perform better. Thanks to Monal Daxini for the idea.
