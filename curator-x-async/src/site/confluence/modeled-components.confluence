h1. Modeled Curator \- Components

Modeled Curator components are intended to allow you to model your ZooKeeper usage early in your application
so that the majority of the code that interacts with ZooKeeper doesn't need to be concerned with
paths, byte arrays, ACLs, options, etc. The [[Pub\-Sub Example|https://github.com/apache/curator/tree/master/curator-examples/src/main/java/pubsub]]
can give you some ideas on how to accomplish this.

h2. ZPath

Instead of using raw string paths, Modeled Curator defines the {{ZPath}} interface that abstracts
ZooKeeper paths. ZPaths can be simple static paths or can contain parameters that can be replaced
as needed.

To build a simple static path, use:

{code}
ZPath path = ZPath.parse("/my/static/path");
{code}

To build a path with parameters, use. {{ZPath.parseWithIds()}} using the value "\{id\}" to
denote a parameter. You can then use the {{resolve()}} method to replace the parameters. E.g.

{code}
ZPath path = ZPath.parseWithIds("/foo/{id}/bar/{id}");

...

ZPath resolvedPath = path.resolve(param1, param2);
{code}

h3. NodeName

Parameters are resolved by calling {{toString()}} on the parameter. You can use {{NodeName}}
to change this behavior. If a parameter implements {{NodeName}} the {{nodeName()}} method
is used as the parameter value.

h2. ModelSpec

A {{ModelSpec}} contains all the metadata needed to operate on a ZooKeeper path:

* A ZPath
* A serializer for the data stored at the path
* Options for how nodes should be created (sequential, compressed data, ttl, etc.)
* ACLs for the nodes at the path
* Options for how to delete nodes (guaranteed, deleting children, etc.)

ModelSpec instances are created via a builder. The builder sets defaults that should be
useful for most applications but you can alter any of these as needed.

{code}
// a standard model spec for the given path and serializer
// the model spec will have no ACLs and the options:
// * createParentsAsContainers
// * setDataIfExists
// * DeleteOption.guaranteed
ModelSpec<MyModel> spec = ModelSpec.builder(path, JacksonModelSerializer.build(MyModel.class));
{code}

As a convenience, ModelSpec provides {{resolve()}} methods in case the ZPath used has parameters.
E.g.

{code}
ZPath path = ZPath.parseWithIds("/foo/{id}/bar/{id}");
ModelSpec<MyModel> spec = ModelSpec.builder(path, JacksonModelSerializer.build(MyModel.class));

...

ModelSpec<MyModel> resolvedSpec = spec.resolve(param1, param2);
{code}

h2. ModeledFramework

{{ModeledFramework}} ties together all the metadata into a Curator\-style instance that is
used to perform ZooKeeper operations. E.g.

{code}
ModeledFramework<MyModel> modeledClient = ModeledFramework.wrap(client, myModelSpec);

...

MyModel instance = ...
modeledClient.set(instance);
{code}

The "set" call in the above example is the equivalent of:

{code}
MyModel instance = ...
String path = "/foo/bar/" + instance.getId();
byte[] data = serializer.serialize(instance);
client.create()
    .withOptions(Sets.newHashSet(CreateOption.createParentsAsContainers, CreateOption.setDataIfExists))
    .forPath(path, data);
{code}

To get a value:

{code}
ModeledFramework<MyModel> modeledClient = ModeledFramework.wrap(client, myModelSpec);

...

modeledClient.read().whenComplete((value, e) -> {
    if ( e != null ) {
        // handle the error
    } else {
        // "value" is the MyModel instance
    }
});
{code}

The "read" call in the above example is the equivalent of:

{code}
String path = "/foo/bar/" + instanceId;
client.getData().forPath(path).whenComplete((data, e) -> {
    if ( e != null ) {
        // handle the error
    } else {
        // NOTE: you must deal with possible deserialization problems
        // caused by clients that write bad data
        // If all of your code uses ModeledFramework you can guarantee that
        // the data is always correctly written
        MyModel model = serializer.deserialize(data);
        // ...
    }
});
{code}

h2. Caching and Typed Parameters

In addition to the above features, Modeled Curator supports [[Integrated Caching|modeled-typed.html]],
[[Typed Parameters|modeled-typed.html]] and [[Versioning|modeled-typed.html]]. See
[[Caching and Typed Parameters|modeled-typed.html]] for details.

